data Node {
  Cons(Node car, Node cdr),
  Null(),
  Symbol(string value),
  Integer(int value),
}

string code = "";
int pos = 0;

bool cur_is(char ch) {
  return pos < len(code) && code[pos] == ch;
}

bool cur_is_alpha() {
  if (pos >= len(code)) {
    return false;
  };
  let cur = ctoi(code[pos]);
  return ctoi('a') <= cur && cur <= ctoi('z');
}

bool cur_is_digit() {
  if (pos >= len(code)) {
    return false;
  } else {
    int value = ctoi(code[pos]);
    return ctoi('0') <= value && value <= ctoi('9');
  };
}

bool eq_str(string s1, string s2) {
  if (len(s1) != len(s2)) return false;;

  for (let i = 0; i < len(s1); i += 1) {
    if (s1[i] != s2[i]) return false;;
  }

  return true;
}

void consume(char ch) {
  if (code[pos] != ch) return;;
  pos += 1;
}

int atoi(string str) {
  int result = 0;
  int weight = 1;
  int zero = ctoi('0');
  for (int i = len(str) - 1 ; i >= 0 ; i -= 1) {
    result += (ctoi(str[i]) - zero) * weight;
    weight *= 10;
  }
  return result;
}

int consume_int() {
  string value = "";
  while (cur_is_digit()) {
    append(value, code[pos]);
    pos += 1;
  }
  return atoi(value);
}

Node parse(string c) {
  code = c;
  pos = 0;
  return parse_expr();
}

// expr : list
//      / symbol
//      / integer
Node parse_expr() {
  if (cur_is('(')) {
    return parse_list();
  } else if (cur_is_alpha()) {
    return parse_symbol();
  } else {
    return parse_integer();
  };;
}

Node parse_list() {
  consume('(');

  let elems = Node[]{};
  while (!cur_is(')')) {
    let elem = parse_expr();
    append(elems, elem);
    consume(' ');
  }
  consume(')');

  let list = Null();
  for (let i = len(elems) - 1; i >= 0; i -= 1) {
    list = Cons(elems[i], list);
  }

  return list;
}

Node parse_symbol() {
  string val = "";
  while (cur_is_alpha()) {
    append(val, code[pos]);
    pos += 1;
  }
  return Symbol(val);
}

Node parse_integer() {
  return Integer(consume_int());
}

Node eval_expr(Node ast) {
  if (ast is Cons(Symbol(name), args)) {
    if (eq_str(name, "print")) {
      if (args is Cons(v, Null())) {
        let value = eval_expr(v);
        if (value is Integer(iv)) {
          puts(iv);
        };
        return Null();
      };
    } else if (eq_str(name, "plus")) {
      if (args is Cons(left, Cons(right, Null()))) {
        let l = eval_expr(left);
        let r = eval_expr(right);
        if (l is Integer(lv)) { if (r is Integer(rv)) {
          return Integer(lv + rv);
        };};
      };
    };;
  };
  return ast;
}

void eval(string code) {
  let ast = parse(code);
  eval_expr(ast);
}

eval("(print (plus 1 1))");
